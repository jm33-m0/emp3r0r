#!/bin/bash

success() {
    echo -e "\n\e[32m[SUCCESS] $1\e[0m\n"
}

info() {
    echo -e "\e[34m[INFO] $1\e[0m"
}

error() {
    echo -e "\n\e[31m[ERROR] $1\e[0m\n"
    exit 1
}

warn() {
    echo -e "\e[33m[WARN] $1\e[0m"
}

pwd="$(pwd)"
prefix="/usr/local"
[[ -n "$PREFIX" ]] && prefix="$PREFIX"
bin_dir="$prefix/bin"
data_dir="$prefix/lib/emp3r0r"
build_dir="$data_dir/build"

# build and tar
temp=/tmp/emp3r0r-build
[[ -d "$temp" ]] || mkdir -p "$temp"

# GOPATH
[[ -z "$GOPATH" ]] && export GOPATH="$HOME/go"
export PATH="$GOPATH/bin:$PATH"

build() {
    # build
    # -----
    command -v go || {
        error "You need to set up Go first"
    }
    go mod tidy || error "go mod tidy"

    # no fucking glibc!
    export CGO_ENABLED=0
    if [[ "$1" = "--debug" ]]; then
        gobuild_cmd="go"
        build_opt="build"
        ldflags="-v"
    else
        gobuild_cmd="go"
        build_opt="build"
        ldflags="-s -w -v"
        # info "Setting up garble"
        # go install mvdan.cc/garble@latest || error "Failed to install garble"
    fi

    info "Building CC"
    {
        cd cmd/cc && go build -o "$temp/cc.exe" -ldflags="$ldflags"
    } || error "build cc"
    info "Building cat"
    {
        cd "$pwd/cmd/cat" && go build -o "$temp/cat.exe" -ldflags="$ldflags"
    } || error "build cat"

    # Linux
    info "Building agent stub"
    {
        cd "$pwd/cmd/agent" &&
            sh -c "$gobuild_cmd $build_opt -o \"$temp/stub-amd64\" -ldflags=\"$ldflags\""
    } || error "build agent stub"
    info "Building agent 386 stub"
    {
        cd "$pwd/cmd/agent" &&
            GOARCH=386 sh -c "$gobuild_cmd $build_opt -o \"$temp/stub-386\" -ldflags=\"$ldflags\""
    } || error "build agent stub-386"
    info "Building agent-arm stub"
    {
        cd "$pwd/cmd/agent" &&
            GOARCH=arm sh -c "$gobuild_cmd $build_opt -o \"$temp/stub-arm\" -ldflags=\"$ldflags\""
    } || error "build agent-arm stub"
    info "Building agent-arm64 stub"
    {
        cd "$pwd/cmd/agent" &&
            GOARCH=arm64 sh -c "$gobuild_cmd $build_opt -o \"$temp/stub-arm64\" -ldflags=\"$ldflags\""
    } || error "build agent-arm64 stub"
    info "Building agent-mips stub"
    {
        cd "$pwd/cmd/agent" &&
            GOARCH=mips sh -c "$gobuild_cmd $build_opt -o \"$temp/stub-mips\" -ldflags=\"$ldflags\""
    } || error "build agent-mips stub"
    info "Building agent-mips64 stub"
    {
        cd "$pwd/cmd/agent" &&
            GOARCH=mips64 sh -c "$gobuild_cmd $build_opt -o \"$temp/stub-mips64\" -ldflags=\"$ldflags\""
    } || error "build agent-mips64 stub"
    info "Building agent-riscv64 stub"
    {
        cd "$pwd/cmd/agent" &&
            GOARCH=riscv64 sh -c "$gobuild_cmd $build_opt -o \"$temp/stub-riscv64\" -ldflags=\"$ldflags\""
    } || error "build agent-riscv64 stub"

    # Windows
    info "Building agent stub for Windows"
    {
        cd "$pwd/cmd/agent" &&
            GOOS=windows sh -c "$gobuild_cmd $build_opt -o \"$temp/stub-win-amd64\" -ldflags=\"$ldflags\""
    } || error "build stub-win"
    info "Building agent stub for Windows 386"
    {
        cd "$pwd/cmd/agent" &&
            GOOS=windows GOARCH=386 sh -c "$gobuild_cmd $build_opt -o \"$temp/stub-win-386\" -ldflags=\"$ldflags\""
    } || error "build stub-win-386"
}

uninstall() {
    [[ "$EUID" -eq 0 ]] || error "You must be root to uninstall emp3r0r"
    info "emp3r0r will be uninstalled from $prefix"

    # data
    rm -rf "$build_dir" || error "Failed to remove $build_dir"
    rm -rf "$data_dir" || error "Failed to remove $data_dir"

    # emp3r0r launcher
    rm -f "$bin_dir/emp3r0r" || error "Failed to remove $bin_dir/emp3r0r"

    success "emp3r0r has been removed"
}

install() {
    [[ "$EUID" -eq 0 ]] || error "You must be root to install emp3r0r"
    info "emp3r0r will be installed to $prefix"

    # check if tmux is installed
    if ! command -v tmux >/dev/null 2>&1; then
        error "tmux not found"
    fi

    # check if emp3r0r is running
    if tmux has-session -t emp3r0r 2>/dev/null; then
        tmux kill-session -t emp3r0r || error "Failed to kill emp3r0r"
    fi
    mkdir -p "$build_dir" || error "Failed to mkdir $build_dir"
    cp -avR tmux "$data_dir" || error "tmux"
    cp -avR modules "$data_dir" || error "modules"
    cp -avR stub* "$build_dir" || error "stub"

    # fix tmux config
    tmux_dir="$data_dir/tmux"
    replace=$(echo -n "$tmux_dir/sh" | sed 's/\//\\\//g')
    sed -i "s/~\/sh/$replace/g" "$tmux_dir/.tmux.conf"

    # emp3r0r binaries
    chmod 755 "$0" cc.exe cat.exe
    cp -avR "$0" "$bin_dir/emp3r0r" || error "$0"
    cp -avR cc.exe "$data_dir/emp3r0r-cc" || error "emp3r0r-cc"
    cp -avR cat.exe "$data_dir/emp3r0r-cat" || error "emp3r0r-cat"

    success "Installed emp3r0r, please check"
}

create_tar() {
    info "Creating archive..."
    tar --zstd -cpf "$pwd/emp3r0r.tar.zst" ./emp3r0r-build || error "failed to create archive"
    success "Packaged emp3r0r"
}

case "$1" in
--release)
    (build) && (
        info "Preparing to archive files"
        cd /tmp || error "Cannot cd to /tmp"
        cp -aR "$pwd/tmux" "$temp" || error "cp tmux"
        cp -aR "$pwd/modules" "$temp" || error "cp modules"
        cp -aR "$pwd/emp3r0r" "$temp" || error "cp emp3r0r"
        create_tar
    )

    ;;

--debug)

    (build --debug) && (
        info "Preparing to archive files"
        cd /tmp || error "Cannot cd to /tmp"
        cp -aR "$pwd/tmux" "$temp" || error "cp tmux"
        cp -aR "$pwd/modules" "$temp" || error "cp modules"
        cp -aR "$pwd/emp3r0r" "$temp" || error "cp emp3r0r"
        create_tar
    )

    ;;

--build)
    (build) &&
        exit 0

    ;;

--uninstall)
    (uninstall) || error "uninstall failed"
    exit 0

    ;;

--install)
    (install) || error "install failed"
    exit 0

    ;;

*)
    # find prefix, either /usr or /usr/local
    if ! test -e "$prefix/lib/emp3r0r/emp3r0r-cc"; then
        # if not found in /usr/local then set to /usr
        prefix="/usr"
        if ! test -e "$prefix/lib/emp3r0r/emp3r0r-cc"; then
            # if still nothing, abort
            error "emp3r0r not installed"
        fi
    fi
    export EMP3R0R_PREFIX="$prefix" # emp3r0r-cc will read this
    data_dir="$prefix/lib/emp3r0r"
    cc="$data_dir/emp3r0r-cc"
    [[ -z "$HOME" ]] && error "HOME not set"
    workspace="$HOME/.emp3r0r"

    # workspace is ~/.emp3r0r
    # ------------------
    [[ -d "$workspace" ]] || mkdir -p "$workspace"
    cd "$workspace" || error "Failed to enter $workspace"

    # Generate certs
    # --------------
    { [[ -f "$workspace/emp3r0r-cert.pem" ]] && [[ -f "$workspace/emp3r0r-key.pem" ]]; } || {
        echo -ne "\e[36mCC names (can be IPs and/or domain names), separate with space:\n>>\e[0m "
        read -r hosts
        "$cc" -gencert "$hosts"
        info "Generated certs, re-run $0"
        exit
    }

    # Run C2 server with tmux UI
    # --------------------------
    if ! command -v tmux >/dev/null 2>&1; then
        error "tmux not found"
    fi

    tmux_conf="$data_dir/tmux/.tmux.conf"
    [[ -f "$tmux_conf" ]] || error "$tmux_conf not found"

    # helper scripts for tmux status line
    [[ -d "$workspace/sh" ]] || cp -r "$data_dir/tmux/sh" "$workspace" || error "copy tmux scripts"

    # if not in a tmux session
    [[ -n "$TMUX" ]] || {
        # create tmux session with our config file
        tmux -f "$tmux_conf" new-session -A -s emp3r0r -n cc "$cc" "$@" || error "$0 must be run in tmux"
        exit
    }

    # if already in a tmux session
    [[ -n "$TMUX" ]] && {
        # rename, and source our config file
        tmux rename-window cc
        tmux rename-session emp3r0r
        tmux source-file "$tmux_conf"
        "$cc" "$@"
    }

    ;;

esac
